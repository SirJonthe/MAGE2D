--------
--TODO--
--------
Restructure to use Vertex Array Objects
	In Engine::Init
		glEnableClientState(GL_VERTEX_ARRAY);
		glEnableClientState(GL_TEXTURE_COORD_ARRAY);
	...cause GUI::Box to break, since that function does not use textures or UV coordinates for rendering (GL_TEXTURE_COORD_ARRAY is still enabled).
	Hack is to disable before rendering box, then re-enabling when box is rendered.
	Long-term solution is to use VAO.
Make SceneGraph (handles relations between transforms, that's all)
Simple GUI
Collision response
Object callbacks
mtlParser
	bool Match("%s = { %f, %f, %f };", mtlList<mtlString> &out);
	// a string (any)
	// an equals sign
	// an opening brace
	// three floats separated by commas
	// a closing brace
	// a semi-colon
	// NOTE: %i, %f, %b, %s (int, float, bool, string)
        // NOTE: values will be returned in 'out'
        // NOTE: can specify if white spaces should be ignored - may even search multiple lines of text
	// NOTE: strings are terminated by the following character in the search string, i.e. "{%s}" is terminated by '}'
	// NOTE: does brace matching for strings, i.e. searching "function(function(), param)" with "function(%s)" returns "function(), param" rather than "function("
	// NOTE: returns FALSE if no match was found
	// NOTE: search always begins from current position forward (doesn't just look for match wherever it can find it)

	bool Expression(int &out, const mtlList<mtlString> &var, const mtlList<int> &val);
	bool Expressions(float &out, const mtlList<mtlString> &def, const mtlList<float> &val);
	// parses a string, treats it as a mathematical expression
	// calculates expression and retuns value in 'out'
	// uses strings in 'var' and values in 'val' to identify variables
Break objects with Voronoi diagrams (splits object in several objects, graphics and colliders into several pieces)
	could be used for fun gameplay mechanics

----------
--DESIGN--
----------
Type tree in Engine should be mtlStringMap instead of mtlBinaryTree (saves a ton of code)
In order for font to work properly I think I need to store font in an extended Graphics object
	Graphics objects store mirrors global state, font modifies global state which might desync Graphics mirrored state from global state
Hide all use of OpenGL in cpp files; don't pollute project with OpenGL (or SDL if possible)

-------------------
--LONG TERM PLANS--
-------------------
Debugger:
	Game object that stops time
	Lets user click on an object and view its properties
	Requires objects to implement an output function (that prints values)
	Lets user view what assets are currently loaded into memory (as well as memory footprint)
Tile set editor
	Game object
	Place tiles + collision boxes in a grid
	Place objects on the grid
Sprite editor:
	Game object that allows for editing sprites
	Load and save sprite files
Physics?
	Roll my own?
		http://gamedevelopment.tutsplus.com/tutorials/custom-2d-physics-engine-oriented-rigid-bodies--gamedev-8032
		http://xbox.create.msdn.com/en-US/education/catalog/tutorial/collision_2d_perpixel_transformed
	Remember:
		Physics act on transforms' World locations (not local locations)

---------------
--IN PROGRESS--
---------------

---------
--DEBUG--
---------
Engine filtering methods

-------------
--WHEN DONE--
-------------
MiniLib
	Update MiniLib components?
Valgrind warnings
Compiler warnings

--------
--BUGS--
--------
Depending on the driver, font rendering is sometimes broken due to the fact that the characters are so closely packed
	On OSX, results in the top pixels of the characters directly below the rendered character to appear
	Fix by letting characters 'breathe', i.e. the UV coordinates are tightly packed around the character, but we increment UVs during construction by the actual character width
	<--> UV width
	####_###__
	#__#_#_#__
	####_####_
	#__#_#__#_
	#__#_####_
	<----> actual width

Valgrind is warning about a 4 byte overwrite in Object::Draw and Image does not render properly (must be something about triangle strip rendering)

--------------
--ADDITIONAL--
--------------

--------
--TODO--
--------
Restructure to use Vertex Array Objects
	In Engine::Init
		glEnableClientState(GL_VERTEX_ARRAY);
		glEnableClientState(GL_TEXTURE_COORD_ARRAY);
	...cause GUI::Box to break, since that function does not use textures or UV coordinates for rendering (GL_TEXTURE_COORD_ARRAY is still enabled).
	Hack is to disable before rendering box, then re-enabling when box is rendered.
	Long-term solution is to use VAO.
Make SceneGraph (handles relations between transforms, that's all)
Simple GUI
Collision response
Object callbacks
Break objects with Voronoi diagrams (splits object in several objects, graphics and colliders into several pieces)
	could be used for fun gameplay mechanics

----------
--DESIGN--
----------
Type tree in Engine should be mtlStringMap instead of mtlBinaryTree (saves a ton of code)
In order for font to work properly I think I need to store font in an extended Graphics object
	Graphics objects store mirrors global state, font modifies global state which might desync Graphics mirrored state from global state
Hide all use of OpenGL in cpp files; don't pollute project with OpenGL (or SDL if possible)

-------------------
--LONG TERM PLANS--
-------------------
Debugger:
	Game object that stops time
	Lets user click on an object and view its properties
	Requires objects to implement an output function (that prints values)
	Lets user view what assets are currently loaded into memory (as well as memory footprint)
Tile set editor
	Game object
	Place tiles + collision boxes in a grid
	Place objects on the grid
Sprite editor:
	Game object that allows for editing sprites
	Load and save sprite files
Physics?
	Roll my own?
		http://gamedevelopment.tutsplus.com/tutorials/custom-2d-physics-engine-oriented-rigid-bodies--gamedev-8032
		http://xbox.create.msdn.com/en-US/education/catalog/tutorial/collision_2d_perpixel_transformed
	Remember:
		Physics act on transforms' World locations (not local locations)

---------------
--IN PROGRESS--
---------------

---------
--DEBUG--
---------
Engine filtering methods
Check memory errors when using GUI::Print(mmlVector<n>, int)
Check tranform system, behaving strangely?
Check RTTI system, IsClassType not returning correct value?
Is collision system correctly filtering collisions based on object vs. collision flags?

-------------
--WHEN DONE--
-------------
MiniLib
	Update MiniLib components?
Valgrind warnings
Compiler warnings

--------
--BUGS--
--------
Depending on the driver, font rendering is sometimes broken due to the fact that the characters are so closely packed
	On OSX, results in the top pixels of the characters directly below the rendered character to appear
	Fix by letting characters 'breathe', i.e. the UV coordinates are tightly packed around the character, but we increment UVs during construction by the actual character width
	<--> UV width
	####_###__
	#__#_#_#__
	####_####_
	#__#_#__#_
	#__#_####_
	<----> actual width

Valgrind is warning about a 4 byte overwrite in Object::Draw and Image does not render properly (must be something about triangle strip rendering)

--------------
--ADDITIONAL--
--------------

#include "Font.h"
#include <GL/glext.h>
#include <iostream>
#include <climits>

#define first_char '!'
#define last_char '~'

#define font_width 128
#define font_height 128

#define font_table_width 16
#define font_table_height 128

#define char_count_width 11
#define char_count_height 9

#define char_px_width 11
#define char_px_height 13

#define char_tab_count 4
#define char_tab_px_width (char_px_width * char_tab_count)

#define char_uv_width (float(char_px_width) / float(font_width))
#define char_uv_height (float(char_px_height) / float(font_height))

static unsigned char font_bits[] = {
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x8f, 0x1f, 0xf1, 0x88, 0x7f, 0xfd, 0xf8, 0xc3,
   0x3f, 0xfe, 0xc1, 0x83, 0xff, 0xff, 0xff, 0xff, 0x8f, 0x1f, 0xf1, 0x88,
   0x07, 0xf8, 0xfa, 0x81, 0x3f, 0xfe, 0xc0, 0x03, 0xff, 0xfe, 0xff, 0xff,
   0x8f, 0x3f, 0x73, 0x00, 0x03, 0xf8, 0xf8, 0x89, 0x7f, 0xff, 0xc0, 0x03,
   0x3f, 0xf8, 0xe3, 0xff, 0x8f, 0xff, 0x7f, 0x00, 0xa3, 0xfe, 0xff, 0xc3,
   0xff, 0xff, 0xf8, 0x1f, 0x7f, 0xfc, 0xe3, 0xff, 0x8f, 0xff, 0x7f, 0x00,
   0x03, 0x1c, 0xc0, 0xe3, 0xff, 0xff, 0xf8, 0x1f, 0x7f, 0xfc, 0x80, 0xff,
   0x8f, 0xff, 0xff, 0x88, 0x03, 0x18, 0xc0, 0xc1, 0xfe, 0xff, 0xf8, 0x1f,
   0xbf, 0xfb, 0x80, 0xff, 0x8f, 0xff, 0x7f, 0x00, 0x07, 0x18, 0xc0, 0x18,
   0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0x7f, 0x00,
   0xaf, 0xf8, 0xff, 0x38, 0xfe, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xe3, 0xff,
   0x8f, 0xff, 0x7f, 0x00, 0x03, 0xf8, 0xf8, 0x00, 0xff, 0xff, 0xc0, 0x03,
   0xff, 0xff, 0xe3, 0xff, 0x8f, 0xff, 0xff, 0x88, 0x03, 0xfc, 0xfa, 0x00,
   0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0x88,
   0xd7, 0xff, 0xf8, 0x81, 0xff, 0xff, 0xc1, 0x83, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x3f, 0x3e, 0xe0, 0xc3, 0x07, 0x78, 0xc0, 0x71, 0x0c, 0xe0, 0x80, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x3f, 0x1e, 0xc0, 0xc1, 0x07, 0x30, 0x80, 0x71,
   0x0c, 0x60, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x1f, 0xc0, 0xc1,
   0x07, 0x30, 0x80, 0x71, 0x0c, 0x60, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x1f, 0x1f, 0xc3, 0xc7, 0xff, 0x31, 0x8e, 0x71, 0x8c, 0x7f, 0xfc, 0xff,
   0xff, 0x1f, 0xf0, 0xff, 0x8f, 0x1f, 0xc1, 0xc7, 0x0f, 0xf0, 0x87, 0x01,
   0x0c, 0x70, 0x80, 0xff, 0xff, 0x1f, 0xf0, 0xff, 0x8f, 0x1f, 0xc0, 0xc7,
   0x07, 0xf0, 0xc3, 0x01, 0x0c, 0x60, 0x00, 0xff, 0xff, 0x1f, 0xf0, 0xff,
   0xc7, 0x1f, 0xc4, 0xc7, 0x07, 0xf8, 0x87, 0x03, 0x0c, 0x60, 0x00, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xc7, 0x1f, 0xc6, 0xc7, 0xc7, 0x3f, 0x8e, 0x7f,
   0xfc, 0x63, 0x1c, 0xff, 0xc7, 0xff, 0xff, 0xf1, 0xe3, 0x1f, 0xc0, 0x01,
   0x07, 0x30, 0x80, 0x7f, 0x0c, 0x60, 0x00, 0xff, 0xc7, 0xff, 0xff, 0xf1,
   0xe3, 0x1f, 0xc0, 0x01, 0x07, 0x30, 0x80, 0x7f, 0x0c, 0x60, 0x00, 0xff,
   0xcf, 0xff, 0xff, 0xf1, 0xe3, 0x3f, 0xe0, 0x01, 0x07, 0x70, 0xc0, 0x7f,
   0x0c, 0xf0, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x01, 0x1c, 0xf0, 0x80, 0x8f, 0x7f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x03,
   0x1e, 0xf0, 0x80, 0xff, 0x01, 0x0c, 0x60, 0x00, 0x8f, 0x7f, 0xfc, 0xff,
   0xff, 0xff, 0xff, 0x01, 0x0c, 0x60, 0x00, 0xff, 0x01, 0x0c, 0x60, 0x00,
   0x8f, 0x7f, 0xfc, 0x8f, 0x0f, 0xf8, 0xf8, 0x01, 0xcc, 0x67, 0x00, 0xff,
   0x7f, 0x8c, 0x63, 0x1c, 0xff, 0xff, 0xff, 0xc7, 0x0f, 0xf8, 0xf1, 0x71,
   0xcc, 0x60, 0x1c, 0xff, 0x7f, 0x0c, 0x60, 0x00, 0xff, 0xff, 0xff, 0xe3,
   0x0f, 0xf8, 0xe3, 0x1f, 0x4c, 0x60, 0x1c, 0xff, 0x3f, 0x1e, 0x70, 0x00,
   0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xc7, 0x0f, 0x4e, 0x66, 0x00, 0xff,
   0x3f, 0x0e, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xe3, 0x0f, 0xf8, 0xe3, 0x8f,
   0x4f, 0x60, 0x00, 0xff, 0x3f, 0x8e, 0xe3, 0x1f, 0xff, 0xff, 0xff, 0xc7,
   0x0f, 0xf8, 0xf1, 0xff, 0xcf, 0x60, 0x00, 0xff, 0x1f, 0x0f, 0xe0, 0x00,
   0x8f, 0x7f, 0xfc, 0x8f, 0x0f, 0xf8, 0xf8, 0x8f, 0xcf, 0x7f, 0x1c, 0xff,
   0x1f, 0x0f, 0xe0, 0x00, 0x8f, 0x7f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x8f,
   0x0f, 0x60, 0x1c, 0xff, 0x1f, 0x1f, 0xf0, 0x80, 0x8f, 0xff, 0xfc, 0xff,
   0xff, 0xff, 0xff, 0x8f, 0x1f, 0x70, 0x1c, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x01, 0x1e, 0x70, 0x80, 0x03, 0x18, 0xc0, 0x01,
   0xc7, 0x71, 0xc0, 0x01, 0x8c, 0x63, 0xfc, 0xff, 0x01, 0x0c, 0x60, 0x00,
   0x03, 0x18, 0xc0, 0x00, 0xc6, 0x71, 0xc0, 0x01, 0x8c, 0x63, 0xfc, 0xff,
   0x01, 0x0c, 0x60, 0x00, 0x03, 0x18, 0xc0, 0x00, 0xc6, 0x71, 0xc0, 0x01,
   0x8c, 0x63, 0xfc, 0xff, 0x71, 0x8c, 0x63, 0x1c, 0xe3, 0x1f, 0xff, 0x38,
   0xc6, 0xf1, 0xf1, 0x7f, 0x8c, 0x63, 0xfc, 0xff, 0x01, 0x8c, 0x7f, 0x1c,
   0x03, 0x1f, 0xf8, 0xf8, 0x07, 0xf0, 0xf1, 0x7f, 0x0c, 0x60, 0xfc, 0xff,
   0x01, 0x8e, 0x7f, 0x1c, 0x03, 0x1f, 0xf8, 0x08, 0x06, 0xf0, 0xf1, 0x7f,
   0x0c, 0x70, 0xfc, 0xff, 0x01, 0x8c, 0x7f, 0x1c, 0x03, 0x1f, 0xf8, 0x08,
   0x06, 0xf0, 0xf1, 0x71, 0x0c, 0x60, 0xfc, 0xff, 0x71, 0x8c, 0x63, 0x1c,
   0xe3, 0x1f, 0xff, 0x38, 0xc6, 0xf1, 0xf1, 0x71, 0x8c, 0x63, 0xfc, 0xff,
   0x01, 0x0c, 0x60, 0x00, 0x03, 0x18, 0xff, 0x00, 0xc6, 0x71, 0xc0, 0x01,
   0x8c, 0x63, 0x00, 0xff, 0x01, 0x0c, 0x60, 0x00, 0x03, 0x18, 0xff, 0x00,
   0xc6, 0x71, 0xc0, 0x01, 0x8c, 0x63, 0x00, 0xff, 0x01, 0x1e, 0x70, 0x80,
   0x03, 0x18, 0xff, 0x01, 0xc7, 0x71, 0xc0, 0x03, 0x8e, 0x63, 0x00, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0x8c, 0xe3, 0x80,
   0x03, 0x3c, 0xe0, 0x00, 0x0f, 0x38, 0x80, 0x71, 0x8c, 0x63, 0x1c, 0xff,
   0x71, 0x8c, 0x63, 0x00, 0x03, 0x18, 0xc0, 0x00, 0x06, 0x30, 0x80, 0x71,
   0x8c, 0x63, 0x1c, 0xff, 0x21, 0x8c, 0x63, 0x00, 0x03, 0x18, 0xc0, 0x00,
   0x06, 0x30, 0x80, 0x71, 0x8c, 0x63, 0x1c, 0xff, 0x01, 0x0c, 0x63, 0x1c,
   0xe3, 0x18, 0xc7, 0x38, 0xc6, 0xff, 0xf1, 0x71, 0x8c, 0x63, 0x1c, 0xff,
   0x01, 0x0c, 0x62, 0x1c, 0xe3, 0x18, 0xc7, 0x38, 0x06, 0xf8, 0xf1, 0x71,
   0x8c, 0x63, 0x1c, 0xff, 0x51, 0x0c, 0x60, 0x1c, 0x03, 0x18, 0xc7, 0x00,
   0x06, 0xf0, 0xf1, 0x71, 0x8c, 0x63, 0x14, 0xff, 0x71, 0x8c, 0x60, 0x1c,
   0x03, 0x18, 0xc1, 0x00, 0x0f, 0xf0, 0xf1, 0x71, 0x8c, 0x63, 0x00, 0xff,
   0x71, 0x8c, 0x61, 0x1c, 0x03, 0x1c, 0xc1, 0x00, 0xfe, 0xf1, 0xf1, 0x71,
   0x1c, 0x71, 0x00, 0xff, 0x71, 0x8c, 0x63, 0x00, 0xe3, 0x1f, 0xc0, 0x38,
   0x06, 0xf0, 0xf1, 0x01, 0x3c, 0x78, 0x08, 0xff, 0x71, 0x8c, 0x63, 0x00,
   0xe3, 0x1f, 0xc0, 0x38, 0x06, 0xf0, 0xf1, 0x01, 0x7c, 0x7c, 0x1c, 0xff,
   0x71, 0x8c, 0xe3, 0x80, 0xe3, 0x3f, 0xc0, 0x38, 0x0e, 0xf8, 0xf1, 0x03,
   0xfe, 0xfe, 0xbe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x71, 0x8c, 0x63, 0x00, 0x0f, 0x3c, 0xfe, 0x81, 0x7f, 0xff, 0xff, 0x8f,
   0x1f, 0x70, 0x80, 0xff, 0x71, 0x8c, 0x63, 0x00, 0x0f, 0x3c, 0xfe, 0x81,
   0x3f, 0xfe, 0xff, 0x8f, 0x0f, 0x60, 0x00, 0xff, 0x71, 0x8c, 0x63, 0x00,
   0x0f, 0x7c, 0xfc, 0x81, 0x1f, 0xfc, 0xff, 0xbf, 0x0f, 0x60, 0x00, 0xff,
   0x21, 0x8c, 0xe3, 0x1f, 0x8f, 0x7f, 0xfc, 0x8f, 0x9f, 0xfc, 0xff, 0xff,
   0x8f, 0x63, 0x1c, 0xff, 0x01, 0x0c, 0xe0, 0x01, 0x8f, 0xff, 0xf8, 0x8f,
   0xdf, 0xfd, 0xff, 0xff, 0x8f, 0x63, 0x00, 0xff, 0x03, 0x0e, 0xe0, 0x80,
   0x8f, 0xff, 0xf8, 0x8f, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x60, 0x80, 0xff,
   0x01, 0x1c, 0x70, 0xc0, 0x8f, 0xff, 0xf1, 0x8f, 0xff, 0xff, 0xff, 0xff,
   0x0f, 0x60, 0x00, 0xff, 0x21, 0x7c, 0x7c, 0xfc, 0x8f, 0xff, 0xf1, 0x8f,
   0xff, 0xff, 0xff, 0xff, 0x0f, 0x60, 0x1c, 0xff, 0x71, 0x7c, 0x7c, 0x00,
   0x0f, 0xfc, 0xe3, 0x81, 0xff, 0x3f, 0x80, 0xff, 0x8f, 0x63, 0x00, 0xff,
   0x71, 0x7c, 0x7c, 0x00, 0x0f, 0xfc, 0xe3, 0x81, 0xff, 0x3f, 0x80, 0xff,
   0x8f, 0x63, 0x00, 0xff, 0x71, 0x7c, 0x7c, 0x00, 0x0f, 0xfc, 0xe3, 0x81,
   0xff, 0x3f, 0x80, 0xff, 0x8f, 0x63, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x03, 0x0e, 0x70, 0x00, 0x03, 0x38, 0xe0, 0x38,
   0x0e, 0x38, 0x80, 0x71, 0x8c, 0x7f, 0x3e, 0xff, 0x01, 0x0c, 0x60, 0x00,
   0x03, 0x18, 0xc0, 0x38, 0x0e, 0x38, 0x80, 0x71, 0x8c, 0x7f, 0x1c, 0xff,
   0x01, 0x0c, 0x60, 0x00, 0x03, 0x18, 0xc0, 0x38, 0x0e, 0x38, 0x80, 0x71,
   0x8c, 0x7f, 0x08, 0xff, 0x71, 0x8c, 0x63, 0xfc, 0xe3, 0x1f, 0xc7, 0x38,
   0x3e, 0xfe, 0x8f, 0x71, 0x8c, 0x7f, 0x00, 0xff, 0xf1, 0x8f, 0x63, 0xe0,
   0x03, 0x1f, 0xff, 0x00, 0x3e, 0xfe, 0x8f, 0x01, 0x8c, 0x7f, 0x00, 0xff,
   0xf1, 0x8f, 0x63, 0xe0, 0x03, 0x1f, 0xc1, 0x00, 0x3e, 0xfe, 0x8f, 0x01,
   0x8e, 0x7f, 0x14, 0xff, 0xf1, 0x8f, 0x63, 0xe0, 0x03, 0x1f, 0xc1, 0x00,
   0x3e, 0x3e, 0x8e, 0x01, 0x8c, 0x7f, 0x1c, 0xff, 0x71, 0x8c, 0x63, 0xfc,
   0xe3, 0x1f, 0xc7, 0x38, 0x3e, 0x3e, 0x8e, 0x71, 0x8c, 0x7f, 0x1c, 0xff,
   0x01, 0x0c, 0x60, 0x00, 0xe3, 0x1f, 0xc0, 0x38, 0x0e, 0x38, 0x80, 0x71,
   0x0c, 0x60, 0x1c, 0xff, 0x01, 0x0c, 0x60, 0x00, 0xe3, 0x1f, 0xc0, 0x38,
   0x0e, 0x38, 0x80, 0x71, 0x0c, 0x60, 0x1c, 0xff, 0x03, 0x0e, 0x70, 0x00,
   0xe3, 0x3f, 0xe0, 0x38, 0x0e, 0x78, 0xc0, 0x71, 0x0c, 0x60, 0x1c, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x71, 0x1c, 0x70, 0x80,
   0x07, 0x1c, 0xe0, 0x01, 0x07, 0x30, 0x8e, 0x71, 0x8c, 0x63, 0x1c, 0xff,
   0x71, 0x0c, 0x60, 0x00, 0x03, 0x18, 0xc0, 0x00, 0x06, 0x30, 0x8e, 0x71,
   0x8c, 0x63, 0x1c, 0xff, 0x71, 0x0c, 0x60, 0x00, 0x03, 0x18, 0xc0, 0x00,
   0x06, 0x30, 0x8e, 0x71, 0x8c, 0x63, 0x1c, 0xff, 0x61, 0x8c, 0x63, 0x1c,
   0xe3, 0x18, 0xc7, 0xf8, 0x3f, 0x3e, 0x8e, 0x71, 0x8c, 0x63, 0x08, 0xff,
   0x41, 0x8c, 0x63, 0x1c, 0xe3, 0x18, 0xc7, 0x00, 0x3f, 0x3e, 0x8e, 0x71,
   0x8c, 0x63, 0x00, 0xff, 0x01, 0x8c, 0x63, 0x00, 0xe3, 0x18, 0xc0, 0x00,
   0x3e, 0x3e, 0x8e, 0x71, 0x8c, 0xe2, 0x80, 0xff, 0x11, 0x8c, 0x63, 0x00,
   0x23, 0x18, 0xe0, 0x01, 0x3e, 0x3e, 0x8e, 0x71, 0x0c, 0x60, 0x00, 0xff,
   0x31, 0x8c, 0x63, 0x80, 0x23, 0x18, 0xc0, 0x3f, 0x3e, 0x3e, 0x8e, 0x23,
   0x0e, 0x60, 0x08, 0xff, 0x71, 0x0c, 0x60, 0xfc, 0x03, 0x18, 0xc7, 0x00,
   0x3e, 0x3e, 0x80, 0x07, 0x0f, 0x61, 0x1c, 0xff, 0x71, 0x0c, 0x60, 0xfc,
   0x03, 0x18, 0xc7, 0x00, 0x3e, 0x3e, 0x80, 0x8f, 0x8f, 0x63, 0x1c, 0xff,
   0x71, 0x1c, 0x70, 0xfc, 0x07, 0x18, 0xc7, 0x01, 0x3f, 0x7e, 0xc0, 0xdf,
   0xdf, 0x77, 0x1c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x71, 0x0c, 0xe0, 0x83, 0x5f, 0x3f, 0xf8, 0x00, 0xfe, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x71, 0x0c, 0xe0, 0x81, 0x0f, 0x3f, 0xf0, 0xfe,
   0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x71, 0x0c, 0xe0, 0x81,
   0x0f, 0x3f, 0xf0, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x71, 0xfc, 0xe3, 0xf1, 0xaf, 0xff, 0xf1, 0xfe, 0xfe, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x01, 0x3c, 0xe0, 0xf3, 0xff, 0xff, 0xf9, 0xfe,
   0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x1c, 0xf0, 0xf9,
   0xff, 0xff, 0xf3, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x03, 0x0e, 0xf8, 0xf3, 0xff, 0xff, 0xf9, 0xfe, 0xfe, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x8f, 0x8f, 0xff, 0xf1, 0xff, 0xff, 0xf1, 0xfe,
   0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0x0f, 0xe0, 0x81,
   0xff, 0x3f, 0xf0, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x8f, 0x0f, 0xe0, 0x81, 0xff, 0x3f, 0xf0, 0xfe, 0xfe, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x8f, 0x0f, 0xe0, 0x83, 0xff, 0x3f, 0xf8, 0x00,
   0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

GLuint Font::m_tId = 0;
GLuint Font::m_vId = 0;
GLuint Font::m_uvId = 0;

GLfloat Font::m_vert[8];
GLfloat Font::m_uv[8];

Font::Font( void )
{
	if (m_tId == 0) {
		glGenBuffers(GL_VERTEX_ARRAY, &m_vId);
		glGenBuffers(GL_TEXTURE_COORD_ARRAY, &m_uvId);

		unsigned int *pixels = new unsigned int[font_width*font_height];

		// every row is aligned (16 bytes * 8 bits) * 128 bytes
		for (int y = 0, i = 0; y < font_height; ++y) {
			for (int x = 0; x < font_width; ++x) {
				unsigned char byte = font_bits[y * font_table_width + x / 8];
				unsigned char bit = byte & (1 << (x % 8));
				if (bit != 0) { // inverted
					pixels[i] = 0xffffffff;
				} else {
					pixels[i] = 0x00000000;
				}
				++i;
			}
		}

		glGenTextures(1, &m_tId);
		glBindTexture(GL_TEXTURE_2D, m_tId);
		glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, (GLsizei)font_width, (GLsizei)font_height, 0, GL_RGBA, GL_UNSIGNED_BYTE, pixels);

		delete [] pixels;
	}
}

void Font::DrawText(const mtlChars &text, float x, float y, float r, float g, float b, float a)
{
	if (text.GetSize() == 0) { return; }

	glBindBuffer(GL_ARRAY_BUFFER, m_uvId);
	glTexCoordPointer(2, GL_FLOAT, 0, (GLvoid*)0);
	glBindBuffer(GL_ARRAY_BUFFER, m_vId);
	glVertexPointer(2, GL_FLOAT, 0, (GLvoid*)0);

	glBindTexture(GL_TEXTURE_2D, m_tId);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	glColor4f(r, g, b, a);

	float ox = 0.0f;
	float oy = 0.0f;
	for (int i = 0; i < text.GetSize(); ++i) {
		char ch = text.GetChars()[i];
		switch (ch) {
		case '\n':
		case '\r':
			ox = 0.0f;
			oy += char_px_height;
			continue;
		case ' ':
			ox += char_px_width;
			continue;
		case '\t':
			ox += char_tab_px_width;
			continue;
		}

		m_vert[0] = x + ox;
		m_vert[1] = y + oy + char_px_height;

		m_vert[2] = x + ox + char_px_width;
		m_vert[3] = y + oy + char_px_height;

		m_vert[4] = x + ox + char_px_width;
		m_vert[5] = y + oy;

		m_vert[6] = x + ox;
		m_vert[7] = y + oy;

		glBindBuffer(GL_ARRAY_BUFFER, m_vId);
		glBufferData(GL_ARRAY_BUFFER, sizeof(m_vert), m_vert, GL_STATIC_DRAW);

		if (ch < first_char || ch > last_char) {
			ch = last_char + 1;
		}
		int index = ch - first_char;
		float ux = char_uv_width * (index % char_count_width);
		float uy = 1.0f - (char_uv_height * (index / char_count_width));

		m_uv[0] = ux;
		m_uv[1] = uy;

		m_uv[2] = ux + char_uv_width;
		m_uv[3] = uy;

		m_uv[4] = ux + char_uv_width;
		m_uv[5] = uy - char_uv_height;

		m_uv[6] = ux;
		m_uv[7] = uy - char_uv_height;

		glBindBuffer(GL_ARRAY_BUFFER, m_uvId);
		glBufferData(GL_ARRAY_BUFFER, sizeof(m_uv), m_uv, GL_STATIC_DRAW);

		glDrawArrays(GL_QUADS, 0, 4);

		ox += char_px_width;
	}
}

int Font::GetWidth( void ) const
{
	return char_px_width;
}

int Font::GetHeight( void ) const
{
	return char_px_height;
}

Point Font::GetSize(const mtlChars &text) const
{
	Point p = { 0, 0 };
	if (text.GetSize() > 0) {
		int x = 0;
		p.y += char_px_height;
		for (int i = 0; i < text.GetSize(); ++i) {
			char ch = text.GetChars()[0];
			if (ch == '\n' || ch == '\r') {
				x = 0;
				p.y += char_px_height;
			} else if (ch == '\t') {
				x += char_tab_px_width;
			} else {
				x += char_px_width;
			}
			p.x = mmlMax2(x, p.x);
		}
	}
	return p;
}
